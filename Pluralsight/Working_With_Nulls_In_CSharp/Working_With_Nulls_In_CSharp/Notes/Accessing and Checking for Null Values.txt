MORE ON NULLABLE<T>
	// false if null, true if valid value
	.HasValue

	 // gets underlying value (or throws exception if null)
	.Value

	// underlying value or default of the value for that Type
	.GetValueOrDefault() 
		ex: if T = int
			0 = default
	
	// value or your owns specified default value
	.GetValueOrDefault(default)

NULLABLE<T> IMPLICIT AND EXPLICIT CONVERSIONS
	int i = 42;
	int? j = i; // no epxlicit cast required

	int? j = 42;
	int i = (int)j;


OVERVIEW OF C# NULL-CHECKING OPERATORS
	Conditional Operator
		?:
			if specified expression evalues to true
				use some value
			else
				use another value

		Wasn't designed to work with null values

	Null-Coalescing Operator
		??

			if object not null
				use value
			else
				let me specify a default value

		Was designed to work with null values

		Works well with arrays 

	Null-Conditional Operator
		?. ?[

		Easily evaluate wether props are null
		Can chain null conditional operators w/out having to write
			as many if-statements

		Works well with arrays of values
			To use the null-conditional operator to reference an array element

				object?[n].?property

				// this wont throw a null ref exception, even if object[n] or the property at object[n] is null
				// AND it wont even throw a null ref exception if the array itself is null, ex:
					// MyObject[] object = null;


THREAD-SAFE NULL DELEGATE INVOCATION
	Goal: invoke a delegate in a thread-safe way and also ensure that we're not
		invoking a null delegate:

		Pre C# 6 example
			PropertyChangedEventHandler eventHandler = PropertyChanged;
			if (eventHandler != null)
			{
				eventHandler(this, new PropertyChangedEventArgs(...));
			}

		Post C# 6 Example

			PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(...));